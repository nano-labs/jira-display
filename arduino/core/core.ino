
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);

static const unsigned char PROGMEM ca_logo[128 * 32 / 8] =
{
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
B00000000, B00000001, B11111000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
B00000000, B00011111, B11111111, B10000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
B00000000, B00111111, B11111111, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
B00000000, B01111111, B11111111, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
B00000000, B01111111, B11111111, B11100000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00110000, B00000000, B01100000, B00000000, B00000000,
B00000001, B11110111, B11111110, B01111000, B00001100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00110000, B00000000, B01100000, B00000000, B00000000,
B00000001, B11100000, B00000000, B01111000, B00001100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00110000, B00000000, B01100000, B00000000, B00000000,
B00000011, B11100000, B00000000, B01111100, B00011000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00110000, B00000000, B01100000, B00000000, B00000000,
B00000011, B11100000, B00000000, B01111100, B00011000, B11011110, B00001111, B00000110, B11110000, B00111100, B00000000, B00110000, B11110000, B01101111, B00001111, B10000000,
B00000011, B11100000, B00000000, B01111100, B00011000, B11111110, B00011111, B10000111, B11110000, B11111111, B00000000, B00110001, B11111000, B01111111, B10011111, B11000000,
B00000011, B11000000, B00000000, B00111100, B00111000, B11100111, B00010001, B11000111, B00111000, B11000011, B00000000, B00110001, B00011100, B01110001, B11011000, B01000000,
B00000011, B11000000, B00000000, B00111100, B00110000, B11000011, B00000000, B11000110, B00011001, B10000001, B10000000, B00110000, B00001100, B01100000, B11011100, B00000000,
B00000011, B11000000, B00000000, B00111100, B00110000, B11000011, B00001111, B11000110, B00011001, B10000001, B10111110, B00110000, B11111100, B01100000, B11001111, B10000000,
B00000011, B11000000, B00000000, B00111100, B00110000, B11000011, B00111111, B11000110, B00011001, B10000001, B10111110, B00110011, B11111100, B01100000, B11000011, B11000000,
B00000011, B11100000, B00000000, B00111100, B01110000, B11000011, B00110000, B11000110, B00011001, B10000001, B10000000, B00110011, B00001100, B01100000, B11000000, B11000000,
B00000011, B11100000, B00000000, B01111100, B01100000, B11000011, B00110001, B11000110, B00011000, B11000011, B00000000, B00110011, B00011100, B01110001, B11010000, B11000000,
B00000011, B11111000, B00000001, B11111100, B01100000, B11000011, B00111111, B11000110, B00011000, B11111111, B00000000, B00110011, B11111100, B01111111, B10011111, B11000000,
B00000011, B10111100, B00000011, B11111100, B01100000, B11000011, B00011110, B11000110, B00011000, B00111100, B00000000, B00110001, B11101100, B01101111, B00001111, B00000000,
B00000001, B10011111, B00001111, B11111000, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
B00000000, B11100110, B00000111, B11110000, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
B00000000, B01100000, B00000111, B11100000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
B00000000, B01111110, B00000111, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
B00000000, B00111110, B00000111, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
B00000000, B00000110, B00000110, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000
};

// constants won't change. They're used here to set pin numbers:
const int prevButtonPin = 2;     // the number of the pushbutton pin
const int nextButtonPin = 4;     // the number of the pushbutton pin
const int startButtonPin = 7;     // the number of the pushbutton pin

const int ledPin =  13;      // the number of the LED pin

unsigned char image_buffer[128*32 / 8];

int inByte = 0;
int prevButtonState = 0;         // variable for reading the pushbutton status
int prevTriggered = 0;
int prevPushed = 0;
int nextButtonState = 0;         // variable for reading the pushbutton status
int nextTriggered = 0;
int nextPushed = 0;
int startButtonState = 0;         // variable for reading the pushbutton status
int startTriggered = 0;
int startPushed = 0;
int ledOn = 0;

void setup() {
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3C (for the 128x32)
  display.clearDisplay();
  display.drawBitmap(0, 0, ca_logo, 128, 32, WHITE);
  display.display();

  // start serial port at 9600 bps:
//  Serial.begin(9600);
  Serial.begin(57600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
  establishContact();  // send a byte to establish contact until receiver responds

  
  pinMode(ledPin, OUTPUT);
  pinMode(prevButtonPin, INPUT);
  pinMode(nextButtonPin, INPUT);
  pinMode(startButtonPin, INPUT);

}

void toggleLed() {
    if (ledOn == 0) {
      digitalWrite(ledPin, HIGH);
      ledOn = 1;
    } else {
      digitalWrite(ledPin, LOW);
      ledOn = 0;
    };
}

void establishContact() {
}

int readBinaryString(char *s) {
  int result = 0;
  while(*s) {
    result <<= 1;
    if(*s++ == '1') result |= 1;
  }
  return result;
}

void loop() {
  prevButtonState = digitalRead(prevButtonPin);
  if (prevButtonState == HIGH) {
    prevTriggered = 1;
  } else {
    if (prevTriggered == 1) {
      prevPushed = 1;
    }
  }
  nextButtonState = digitalRead(nextButtonPin);
  if (nextButtonState == HIGH) {
    nextTriggered = 1;
  } else {
    if (nextTriggered == 1) {
      nextPushed = 1;
    }
  }
  startButtonState = digitalRead(startButtonPin);
  if (startButtonState == HIGH) {
    startTriggered = 1;
  } else {
    if (startTriggered == 1) {
      startPushed = 1;
    }
  }
  if (nextPushed == 1 || prevPushed == 1 || startPushed == 1) {
    delay(200);
  }

  if (prevPushed == 1) {
    Serial.println("prev");
    toggleLed();
    prevPushed = 0;
    prevTriggered = 0;
  };
  if (nextPushed == 1) {
    Serial.println("next");
    toggleLed();
    nextPushed = 0;
    nextTriggered = 0;
  };
  if (startPushed == 1) {
    Serial.println("start");
    toggleLed();
    startPushed = 0;
    startTriggered = 0;
  };

  inByte = Serial.read();
  if (inByte == 73) {
    Serial.readBytes(image_buffer, 512);
    Serial.println("end_image");
    display.clearDisplay();
    display.drawBitmap(0, 0, image_buffer, 128, 32, WHITE);
    display.display();
  }
}
